'''
Created on May 7, 2017

@author: Goldacbj
'''
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio.Alphabet import IUPAC
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from Bio import SeqIO
from Bio import pairwise2
from Bio.SubsMat import MatrixInfo as matlist
import scipy.stats as stats

# Carrier - Anopheles-arabiensis-Dongola_PEPTIDES_AaraD1.3.fa
# Non-Carrier1 - Anopheles-quadriannulatus-SANGQUA_PEPTIDES.AquaS1.3.fa
# Non_carrier2 - Anopheles-christyi-ACHKN1017_PEPTIDES_AchrA1.3.fa

## Steps: 
# Part 1: 
# * research for proteins which have been found to possibly do with malaria
# * record these genes into a fasta document
# * Read in all the proteins and the proteomes for carriers, mild carriers, and non carriers

# Part 2: 
# * record the optimal alignment score for each protein
# * align each protein to each proteome and record highest scoring alignment and its score

# Part 3: 
# * Statistically analyze and determine the most corrolated protein with malaria

# Part 4:
# * Create a sequence logo for the top protein and its alingments


#### -------------------------------- PART 1 ---------------------------------------------

def main():
    '''* align genes from carrier with ones from Non-carrier and record genes that are under 85% seq identity 
        * align the 85% seq idenetiy genes with ones from non-carrier 2 and record those which are also under 85%'''
    ### carrier Proteomes ----------------------
    carrier_proteomes = dict()
    
    # Anopheles-arabiensis-Dongola_PEPTIDES_AaraD1.3.fa
    carrier1_proteome =  list(SeqIO.parse("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/Proteomes/Anopheles-arabiensis-Dongola_PEPTIDES_AaraD1.3.fa", "fasta"))
    carrier_proteomes.append(carrier1_proteome)
    # Anopheles-darlingi-Coari_PEPTIDES_AdarC3.3.fa
    carrier2_proteome = list(SeqIO.parse("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/Proteomes/Anopheles-darlingi-Coari_PEPTIDES_AdarC3.3.fa", "fasta"))
    carrier_proteomes.append(carrier2_proteome)
    # Anopheles-gambiae-PEST_PEPTIDES_AgamP4.3.fa
    carrier3_proteome = list(SeqIO.parse("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/Proteomes/Anopheles-gambiae-PEST_PEPTIDES_AgamP4.3.fa", "fasta"))
    carrier_proteomes.append(carrier3_proteome)
    # Anopheles-atroparvus-EBRO_PEPTIDES_AatrE1.3.fa
    carrier4_proteome = list(SeqIO.parse("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/Proteomes/Anopheles-atroparvus-EBRO_PEPTIDES_AatrE1.3.fa", "fasta"))
    carrier_proteomes.append(carrier4_proteome)
    # Anopheles-coluzzii-Mali-NIH_PEPTIDES_AcolM1.2.fa
    carrier5_proteome = list(SeqIO.parse("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/Proteomes/Anopheles-coluzzii-Mali-NIH_PEPTIDES_AcolM1.2.fa", "fasta"))
    carrier_proteomes.append(carrier5_proteome)
    # Anopheles-culicifacies-A-37_PEPTIDES_AculA1.3.fa
    carrier6_proteome = list(SeqIO.parse("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/Proteomes/Anopheles-culicifacies-A-37_PEPTIDES_AculA1.3.fa", "fasta"))
    carrier_proteomes.append(carrier6_proteome)
    # Anopheles-dirus-WRAIR2_PEPTIDES_AdirW1.3.fa
    carrier7_proteome = list(SeqIO.parse("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/Proteomes/Anopheles-dirus-WRAIR2_PEPTIDES_AdirW1.3.fa", "fasta"))
    carrier_proteomes.append(carrier7_proteome)
    # Anopheles-farauti-FAR1_PEPTIDES_AfarF2.1.fa
    carrier8_proteome = list(SeqIO.parse("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/Proteomes/Anopheles-farauti-FAR1_PEPTIDES_AfarF2.1.fa", "fasta"))
    carrier_proteomes.append(carrier8_proteome)
    # Anopheles-funestus-FUMOZ_PEPTIDES_AfunF1.3.fa
    carrier9_proteome = list(SeqIO.parse("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/Proteomes/Anopheles-funestus-FUMOZ_PEPTIDES_AfunF1.3.fa", "fasta"))
    carrier_proteomes.append(carrier9_proteome)
    # Anopheles-maculatus-maculatus3_PEPTIDES_AmacM1.3.fa
    carrier10_proteome = list(SeqIO.parse("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/Proteomes/Anopheles-maculatus-maculatus3_PEPTIDES_AmacM1.3.fa", "fasta"))
    carrier_proteomes.append(carrier10_proteome)
    # Anopheles-sinensis-SINENSIS_PEPTIDES_AsinS2.1.fa
    carrier11_proteome = list(SeqIO.parse("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/Proteomes/Anopheles-sinensis-SINENSIS_PEPTIDES_AsinS2.1.fa", "fasta"))
    carrier_proteomes.append(carrier11_proteome)
    # Anopheles-stephensi_SDA-500_PEPTIDES.AsteS1.3.fa
    carrier12_proteome = list(SeqIO.parse("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/Proteomes/Anopheles-stephensi_SDA-500_PEPTIDES.AsteS1.3.fa", "fasta"))
    carrier_proteomes.append(carrier12_proteome)
    
    ### Mild carrier Proteomes -----------------------------------------
    mild_carrier_proteomes = list()
    
    # Anopheles-albimanus_STECLA_PEPTIDES_AalbS1.3.fa
    mild_carrier1_proteome = list(SeqIO.parse("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/Proteomes/Anopheles-albimanus_STECLA_PEPTIDES_AalbS1.3.fa", "fasta"))
    mild_carrier_proteomes.append(mild_carrier1_proteome)
    # Anopheles-epiroticus-Epiroticus2_PEPTIDES_AepiE1.3.fa
    mild_carrier2_proteome = list(SeqIO.parse("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/Proteomes/Anopheles-epiroticus-Epiroticus2_PEPTIDES_AepiE1.3.fa", "fasta"))
    mild_carrier_proteomes.append(mild_carrier2_proteome)
    # Anopheles-melas-CM1001059_PEPTIDES_AmelC2.1.fa
    mild_carrier3_proteome = list(SeqIO.parse("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/Proteomes/Anopheles-melas-CM1001059_PEPTIDES_AmelC2.1.fa", "fasta"))
    mild_carrier_proteomes.append(mild_carrier3_proteome)
    # Anopheles-merus-MAF_PEPTIDES_AmerM2.1.fa
    mild_carrier4_proteome = list(SeqIO.parse("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/Proteomes/Anopheles-merus-MAF_PEPTIDES_AmerM2.1.fa", "fasta"))
    mild_carrier_proteomes.append(mild_carrier4_proteome)
    # Anopheles-minimus-Minimus1_PEPTIDES_AminM1.3.fa
    mild_carrier5_proteome = list(SeqIO.parse("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/Proteomes/Anopheles-minimus-Minimus1_PEPTIDES_AminM1.3.fa", "fasta"))
    mild_carrier_proteomes.append(mild_carrier5_proteome)
    

    ### Non Carrier Proteomes ------------------
    non_carrier_proteomes = list()
    
    # Anopheles-quadriannulatus-SANGQUA_PEPTIDES.AquaS1.3.fa
    non_carrier1_proteome = list(SeqIO.parse("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/Proteomes/Anopheles-quadriannulatus-SANGQUA_PEPTIDES.AquaS1.3.fa", "fasta"))
    non_carrier_proteomes.append(non_carrier1_proteome)
    # Anopheles-christyi-ACHKN1017_PEPTIDES_AchrA1.3.fa
    non_carrier2_proteome = list(SeqIO.parse("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/Proteomes/Anopheles-christyi-ACHKN1017_PEPTIDES_AchrA1.3.fa", "fasta"))
    non_carrier_proteomes.append(non_carrier2_proteome)   
        
        
    # Proteins to compare -----------------------     
    protein_sequences = list()

    # Protein 1: 
    # lysysome protein 
    #    # MKVFIAIVLTIVASCALAEAKKFSKCDLAKTLANNGIARASL
    #    # PDWICLVQNESAFSTSATNKNKNGSTDYGIFQINNKYWCDSSYGSNDCK
    #    # IACKKLLDDDITDDIKCAKLIFKRHGYNAWYGWKNHCNGKALPNVDSCF
    protein1 = SeqRecord(Seq("MKVFIAIVLTIVASCALAEAKKFSKCDLAKTLANNGIARASLPDWICLVQNESAFSTSATNKNKNGST" 
            + "DYGIFQINNKYWCDSSYGSNDCKIACKKLLDDDITDDIKCAKLIFKRHGYNAWYGWKNHCNGKALPNVDSCF",  IUPAC.IUPACProtein), id="ApLysc1")
    protein_sequences.append(protein1)
    # Protein 2: 
    # F2Y0G7
    protein2 = SeqIO.read("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/F2Y0G7.fasta", "fasta")
    protein_sequences.append(protein2)
    # Protein 3: 
    # F5HM55
    protein3 = SeqIO.read("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/F5HM55.fasta", "fasta")
    protein_sequences.append(protein3)
    # Protein 4: 
    # L7RM09
    protein4 = SeqIO.read("C:/Users/Goldacbj/Google Drive/Documents/BIO/BMTH312/Project/L7RM09.fasta", "fasta")
    protein_sequences.append(protein4)
    
    outputFile = open("output.txt", "r+")
    
    
    computeOptimalAlignmentScores(protein_sequences)

### ---------------------------- PART 2 -------------------------------------------------
def computeOptimalScore(protein_seq, scoring_matrix):
    score = 0
    for letter in protein_seq : 
        score = score + scoring_matrix[letter, letter]
    
    return score
    
    

def computeOptimalAlignmentScores(protein_records, output_file):
    scoringMatrix = matlist.blosum62
    output_file.write("optimal scores  ------------------------------------- \n")
    for record in protein_records : 
        score = computeOptimalScore(record.seq, scoringMatrix)
        output_file.write(record.id + " : " + str(score))
    
    return     

def computeMaxAlignment(protein1, proteome):
    best_alignment = None
    highest_score = 0
    for protein in proteome: 
        try : 
            alignment_score = pairwise2.align.globalds(protein1.seq, protein.seq, matlist.blosum62 -11, -1, score_only=True)
            if alignment_score > highest_score : 
                highest_score = alignment_score
                best_alignment = pairwise2.align.globalds(protein1.seq, protein.seq, matlist.blosum62 -11, -1, one_alignment_only=True)
        except: 
            'Do noting'
    
    return best_alignment
        



def findMaxAlignmentForProteins(protein_records, output_file, carrier_proteomes, mild_carrier_proteomes, non_carrier_proteomes):
    output_file.write("\n")
    output_file.write("optimal alignments ---------------------------------- \n")
    for record in protein_records: 
        output_file.write("Carrier alignments \n")
        output_file.write("\t" + record.id + " : " + "\n") 
        for proteome in carrier_proteomes : 
            alignment = computeMaxAlignment(record, proteome)
            output_file.write("\t \t" + proteome.id + ""
    
    
    
    
    